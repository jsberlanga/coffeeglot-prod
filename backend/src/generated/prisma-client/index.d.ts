// Code generated by Prisma (prisma@1.31.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  course: (where?: CourseWhereInput) => Promise<boolean>;
  enrollment: (where?: EnrollmentWhereInput) => Promise<boolean>;
  teacher: (where?: TeacherWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  course: (where: CourseWhereUniqueInput) => CoursePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  enrollment: (where: EnrollmentWhereUniqueInput) => EnrollmentPromise;
  enrollments: (args?: {
    where?: EnrollmentWhereInput;
    orderBy?: EnrollmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Enrollment>;
  enrollmentsConnection: (args?: {
    where?: EnrollmentWhereInput;
    orderBy?: EnrollmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EnrollmentConnectionPromise;
  teacher: (where: TeacherWhereUniqueInput) => TeacherPromise;
  teachers: (args?: {
    where?: TeacherWhereInput;
    orderBy?: TeacherOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Teacher>;
  teachersConnection: (args?: {
    where?: TeacherWhereInput;
    orderBy?: TeacherOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TeacherConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VotePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createEnrollment: (data: EnrollmentCreateInput) => EnrollmentPromise;
  updateEnrollment: (args: {
    data: EnrollmentUpdateInput;
    where: EnrollmentWhereUniqueInput;
  }) => EnrollmentPromise;
  upsertEnrollment: (args: {
    where: EnrollmentWhereUniqueInput;
    create: EnrollmentCreateInput;
    update: EnrollmentUpdateInput;
  }) => EnrollmentPromise;
  deleteEnrollment: (where: EnrollmentWhereUniqueInput) => EnrollmentPromise;
  deleteManyEnrollments: (where?: EnrollmentWhereInput) => BatchPayloadPromise;
  createTeacher: (data: TeacherCreateInput) => TeacherPromise;
  updateTeacher: (args: {
    data: TeacherUpdateInput;
    where: TeacherWhereUniqueInput;
  }) => TeacherPromise;
  updateManyTeachers: (args: {
    data: TeacherUpdateManyMutationInput;
    where?: TeacherWhereInput;
  }) => BatchPayloadPromise;
  upsertTeacher: (args: {
    where: TeacherWhereUniqueInput;
    create: TeacherCreateInput;
    update: TeacherUpdateInput;
  }) => TeacherPromise;
  deleteTeacher: (where: TeacherWhereUniqueInput) => TeacherPromise;
  deleteManyTeachers: (where?: TeacherWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  enrollment: (
    where?: EnrollmentSubscriptionWhereInput
  ) => EnrollmentSubscriptionPayloadSubscription;
  teacher: (
    where?: TeacherSubscriptionWhereInput
  ) => TeacherSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TeacherOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "age_ASC"
  | "age_DESC"
  | "image_ASC"
  | "image_DESC"
  | "isNative_ASC"
  | "isNative_DESC"
  | "about_ASC"
  | "about_DESC"
  | "experience_ASC"
  | "experience_DESC"
  | "education_ASC"
  | "education_DESC"
  | "certifications_ASC"
  | "certifications_DESC";

export type VoteOrderByInput = "id_ASC" | "id_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "details_ASC"
  | "details_DESC"
  | "price_ASC"
  | "price_DESC"
  | "language_ASC"
  | "language_DESC"
  | "location_ASC"
  | "location_DESC"
  | "seats_ASC"
  | "seats_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC";

export type EnrollmentOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface VoteUpdateManyWithoutTeacherInput {
  create?: VoteCreateWithoutTeacherInput[] | VoteCreateWithoutTeacherInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutTeacherInput[]
    | VoteUpdateWithWhereUniqueWithoutTeacherInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutTeacherInput[]
    | VoteUpsertWithWhereUniqueWithoutTeacherInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutVotesDataInput {
  email?: String;
  password?: String;
  teachers?: TeacherUpdateManyWithoutCreatedByInput;
  courses?: CourseUpdateManyWithoutCreatedByInput;
  coursesEnrolled?: EnrollmentUpdateManyWithoutUserInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  teachers_every?: TeacherWhereInput;
  teachers_some?: TeacherWhereInput;
  teachers_none?: TeacherWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  courses_every?: CourseWhereInput;
  courses_some?: CourseWhereInput;
  courses_none?: CourseWhereInput;
  coursesEnrolled_every?: EnrollmentWhereInput;
  coursesEnrolled_some?: EnrollmentWhereInput;
  coursesEnrolled_none?: EnrollmentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CourseUpdateManyWithoutCreatedByInput {
  create?:
    | CourseCreateWithoutCreatedByInput[]
    | CourseCreateWithoutCreatedByInput;
  delete?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  connect?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  set?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  disconnect?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  update?:
    | CourseUpdateWithWhereUniqueWithoutCreatedByInput[]
    | CourseUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | CourseUpsertWithWhereUniqueWithoutCreatedByInput[]
    | CourseUpsertWithWhereUniqueWithoutCreatedByInput;
  deleteMany?: CourseScalarWhereInput[] | CourseScalarWhereInput;
  updateMany?:
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput;
}

export interface CourseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  seats?: Int;
  seats_not?: Int;
  seats_in?: Int[] | Int;
  seats_not_in?: Int[] | Int;
  seats_lt?: Int;
  seats_lte?: Int;
  seats_gt?: Int;
  seats_gte?: Int;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  createdBy?: UserWhereInput;
  usersEnrolled_every?: EnrollmentWhereInput;
  usersEnrolled_some?: EnrollmentWhereInput;
  usersEnrolled_none?: EnrollmentWhereInput;
  AND?: CourseWhereInput[] | CourseWhereInput;
  OR?: CourseWhereInput[] | CourseWhereInput;
  NOT?: CourseWhereInput[] | CourseWhereInput;
}

export interface CourseUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutCreatedByDataInput;
}

export interface TeacherWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  isNative?: String;
  isNative_not?: String;
  isNative_in?: String[] | String;
  isNative_not_in?: String[] | String;
  isNative_lt?: String;
  isNative_lte?: String;
  isNative_gt?: String;
  isNative_gte?: String;
  isNative_contains?: String;
  isNative_not_contains?: String;
  isNative_starts_with?: String;
  isNative_not_starts_with?: String;
  isNative_ends_with?: String;
  isNative_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  experience?: String;
  experience_not?: String;
  experience_in?: String[] | String;
  experience_not_in?: String[] | String;
  experience_lt?: String;
  experience_lte?: String;
  experience_gt?: String;
  experience_gte?: String;
  experience_contains?: String;
  experience_not_contains?: String;
  experience_starts_with?: String;
  experience_not_starts_with?: String;
  experience_ends_with?: String;
  experience_not_ends_with?: String;
  education?: String;
  education_not?: String;
  education_in?: String[] | String;
  education_not_in?: String[] | String;
  education_lt?: String;
  education_lte?: String;
  education_gt?: String;
  education_gte?: String;
  education_contains?: String;
  education_not_contains?: String;
  education_starts_with?: String;
  education_not_starts_with?: String;
  education_ends_with?: String;
  education_not_ends_with?: String;
  certifications?: String;
  certifications_not?: String;
  certifications_in?: String[] | String;
  certifications_not_in?: String[] | String;
  certifications_lt?: String;
  certifications_lte?: String;
  certifications_gt?: String;
  certifications_gte?: String;
  certifications_contains?: String;
  certifications_not_contains?: String;
  certifications_starts_with?: String;
  certifications_not_starts_with?: String;
  certifications_ends_with?: String;
  certifications_not_ends_with?: String;
  createdBy?: UserWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: TeacherWhereInput[] | TeacherWhereInput;
  OR?: TeacherWhereInput[] | TeacherWhereInput;
  NOT?: TeacherWhereInput[] | TeacherWhereInput;
}

export interface UserCreateWithoutTeachersInput {
  id?: ID_Input;
  email: String;
  password: String;
  votes?: VoteCreateManyWithoutUserInput;
  courses?: CourseCreateManyWithoutCreatedByInput;
  coursesEnrolled?: EnrollmentCreateManyWithoutUserInput;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface EnrollmentCreateManyWithoutUserInput {
  create?:
    | EnrollmentCreateWithoutUserInput[]
    | EnrollmentCreateWithoutUserInput;
  connect?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
}

export interface CourseUpdateWithoutCreatedByDataInput {
  title?: String;
  details?: String;
  price?: Int;
  language?: String;
  location?: String;
  seats?: Int;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  usersEnrolled?: EnrollmentUpdateManyWithoutCourseInput;
}

export interface EnrollmentCreateWithoutUserInput {
  id?: ID_Input;
  course: CourseCreateOneWithoutUsersEnrolledInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CourseCreateOneWithoutUsersEnrolledInput {
  create?: CourseCreateWithoutUsersEnrolledInput;
  connect?: CourseWhereUniqueInput;
}

export interface EnrollmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EnrollmentWhereInput;
  AND?: EnrollmentSubscriptionWhereInput[] | EnrollmentSubscriptionWhereInput;
  OR?: EnrollmentSubscriptionWhereInput[] | EnrollmentSubscriptionWhereInput;
  NOT?: EnrollmentSubscriptionWhereInput[] | EnrollmentSubscriptionWhereInput;
}

export interface CourseCreateWithoutUsersEnrolledInput {
  id?: ID_Input;
  title: String;
  details: String;
  price: Int;
  language: String;
  location: String;
  seats: Int;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  createdBy: UserCreateOneWithoutCoursesInput;
}

export interface VoteUpdateInput {
  teacher?: TeacherUpdateOneRequiredWithoutVotesInput;
  user?: UserUpdateOneRequiredWithoutVotesInput;
}

export interface CourseUpdateInput {
  title?: String;
  details?: String;
  price?: Int;
  language?: String;
  location?: String;
  seats?: Int;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  createdBy?: UserUpdateOneRequiredWithoutCoursesInput;
  usersEnrolled?: EnrollmentUpdateManyWithoutCourseInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
}

export interface UserUpdateOneRequiredWithoutCoursesInput {
  create?: UserCreateWithoutCoursesInput;
  update?: UserUpdateWithoutCoursesDataInput;
  upsert?: UserUpsertWithoutCoursesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  teachers?: TeacherUpdateManyWithoutCreatedByInput;
  votes?: VoteUpdateManyWithoutUserInput;
  courses?: CourseUpdateManyWithoutCreatedByInput;
  coursesEnrolled?: EnrollmentUpdateManyWithoutUserInput;
}

export interface UserUpdateWithoutCoursesDataInput {
  email?: String;
  password?: String;
  teachers?: TeacherUpdateManyWithoutCreatedByInput;
  votes?: VoteUpdateManyWithoutUserInput;
  coursesEnrolled?: EnrollmentUpdateManyWithoutUserInput;
}

export interface TeacherUpdateManyMutationInput {
  name?: String;
  age?: Int;
  image?: String;
  isNative?: String;
  about?: String;
  experience?: String;
  education?: String;
  certifications?: String;
}

export interface TeacherUpdateManyWithoutCreatedByInput {
  create?:
    | TeacherCreateWithoutCreatedByInput[]
    | TeacherCreateWithoutCreatedByInput;
  delete?: TeacherWhereUniqueInput[] | TeacherWhereUniqueInput;
  connect?: TeacherWhereUniqueInput[] | TeacherWhereUniqueInput;
  set?: TeacherWhereUniqueInput[] | TeacherWhereUniqueInput;
  disconnect?: TeacherWhereUniqueInput[] | TeacherWhereUniqueInput;
  update?:
    | TeacherUpdateWithWhereUniqueWithoutCreatedByInput[]
    | TeacherUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | TeacherUpsertWithWhereUniqueWithoutCreatedByInput[]
    | TeacherUpsertWithWhereUniqueWithoutCreatedByInput;
  deleteMany?: TeacherScalarWhereInput[] | TeacherScalarWhereInput;
  updateMany?:
    | TeacherUpdateManyWithWhereNestedInput[]
    | TeacherUpdateManyWithWhereNestedInput;
}

export interface TeacherUpdateInput {
  name?: String;
  age?: Int;
  image?: String;
  isNative?: String;
  about?: String;
  experience?: String;
  education?: String;
  certifications?: String;
  createdBy?: UserUpdateOneRequiredWithoutTeachersInput;
  votes?: VoteUpdateManyWithoutTeacherInput;
}

export interface TeacherUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TeacherWhereUniqueInput;
  data: TeacherUpdateWithoutCreatedByDataInput;
}

export interface EnrollmentUpdateInput {
  course?: CourseUpdateOneRequiredWithoutUsersEnrolledInput;
  user?: UserUpdateOneRequiredWithoutCoursesEnrolledInput;
}

export interface TeacherUpdateWithoutCreatedByDataInput {
  name?: String;
  age?: Int;
  image?: String;
  isNative?: String;
  about?: String;
  experience?: String;
  education?: String;
  certifications?: String;
  votes?: VoteUpdateManyWithoutTeacherInput;
}

export interface EnrollmentCreateInput {
  id?: ID_Input;
  course: CourseCreateOneWithoutUsersEnrolledInput;
  user: UserCreateOneWithoutCoursesEnrolledInput;
}

export interface VoteUpsertWithWhereUniqueWithoutTeacherInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutTeacherDataInput;
  create: VoteCreateWithoutTeacherInput;
}

export interface UserUpsertWithoutCoursesInput {
  update: UserUpdateWithoutCoursesDataInput;
  create: UserCreateWithoutCoursesInput;
}

export interface VoteUpdateWithWhereUniqueWithoutTeacherInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutTeacherDataInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteUpdateWithoutTeacherDataInput {
  user?: UserUpdateOneRequiredWithoutVotesInput;
}

export interface TeacherScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  isNative?: String;
  isNative_not?: String;
  isNative_in?: String[] | String;
  isNative_not_in?: String[] | String;
  isNative_lt?: String;
  isNative_lte?: String;
  isNative_gt?: String;
  isNative_gte?: String;
  isNative_contains?: String;
  isNative_not_contains?: String;
  isNative_starts_with?: String;
  isNative_not_starts_with?: String;
  isNative_ends_with?: String;
  isNative_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  experience?: String;
  experience_not?: String;
  experience_in?: String[] | String;
  experience_not_in?: String[] | String;
  experience_lt?: String;
  experience_lte?: String;
  experience_gt?: String;
  experience_gte?: String;
  experience_contains?: String;
  experience_not_contains?: String;
  experience_starts_with?: String;
  experience_not_starts_with?: String;
  experience_ends_with?: String;
  experience_not_ends_with?: String;
  education?: String;
  education_not?: String;
  education_in?: String[] | String;
  education_not_in?: String[] | String;
  education_lt?: String;
  education_lte?: String;
  education_gt?: String;
  education_gte?: String;
  education_contains?: String;
  education_not_contains?: String;
  education_starts_with?: String;
  education_not_starts_with?: String;
  education_ends_with?: String;
  education_not_ends_with?: String;
  certifications?: String;
  certifications_not?: String;
  certifications_in?: String[] | String;
  certifications_not_in?: String[] | String;
  certifications_lt?: String;
  certifications_lte?: String;
  certifications_gt?: String;
  certifications_gte?: String;
  certifications_contains?: String;
  certifications_not_contains?: String;
  certifications_starts_with?: String;
  certifications_not_starts_with?: String;
  certifications_ends_with?: String;
  certifications_not_ends_with?: String;
  AND?: TeacherScalarWhereInput[] | TeacherScalarWhereInput;
  OR?: TeacherScalarWhereInput[] | TeacherScalarWhereInput;
  NOT?: TeacherScalarWhereInput[] | TeacherScalarWhereInput;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  update?: UserUpdateWithoutVotesDataInput;
  upsert?: UserUpsertWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateOneWithoutCoursesInput {
  create?: UserCreateWithoutCoursesInput;
  connect?: UserWhereUniqueInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  teacher?: TeacherWhereInput;
  user?: UserWhereInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface TeacherCreateManyWithoutCreatedByInput {
  create?:
    | TeacherCreateWithoutCreatedByInput[]
    | TeacherCreateWithoutCreatedByInput;
  connect?: TeacherWhereUniqueInput[] | TeacherWhereUniqueInput;
}

export interface EnrollmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  course?: CourseWhereInput;
  user?: UserWhereInput;
  AND?: EnrollmentWhereInput[] | EnrollmentWhereInput;
  OR?: EnrollmentWhereInput[] | EnrollmentWhereInput;
  NOT?: EnrollmentWhereInput[] | EnrollmentWhereInput;
}

export interface VoteCreateManyWithoutTeacherInput {
  create?: VoteCreateWithoutTeacherInput[] | VoteCreateWithoutTeacherInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface CourseUpdateManyDataInput {
  title?: String;
  details?: String;
  price?: Int;
  language?: String;
  location?: String;
  seats?: Int;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
}

export interface CourseCreateManyWithoutCreatedByInput {
  create?:
    | CourseCreateWithoutCreatedByInput[]
    | CourseCreateWithoutCreatedByInput;
  connect?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
}

export interface EnrollmentUpdateManyWithoutCourseInput {
  create?:
    | EnrollmentCreateWithoutCourseInput[]
    | EnrollmentCreateWithoutCourseInput;
  delete?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  connect?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  set?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  disconnect?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  update?:
    | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    | EnrollmentUpdateWithWhereUniqueWithoutCourseInput;
  upsert?:
    | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    | EnrollmentUpsertWithWhereUniqueWithoutCourseInput;
  deleteMany?: EnrollmentScalarWhereInput[] | EnrollmentScalarWhereInput;
}

export interface EnrollmentCreateManyWithoutCourseInput {
  create?:
    | EnrollmentCreateWithoutCourseInput[]
    | EnrollmentCreateWithoutCourseInput;
  connect?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
}

export interface EnrollmentUpdateWithWhereUniqueWithoutCourseInput {
  where: EnrollmentWhereUniqueInput;
  data: EnrollmentUpdateWithoutCourseDataInput;
}

export interface UserCreateOneWithoutCoursesEnrolledInput {
  create?: UserCreateWithoutCoursesEnrolledInput;
  connect?: UserWhereUniqueInput;
}

export interface EnrollmentUpdateWithoutCourseDataInput {
  user?: UserUpdateOneRequiredWithoutCoursesEnrolledInput;
}

export interface VoteCreateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutCoursesEnrolledInput {
  create?: UserCreateWithoutCoursesEnrolledInput;
  update?: UserUpdateWithoutCoursesEnrolledDataInput;
  upsert?: UserUpsertWithoutCoursesEnrolledInput;
  connect?: UserWhereUniqueInput;
}

export interface TeacherCreateOneWithoutVotesInput {
  create?: TeacherCreateWithoutVotesInput;
  connect?: TeacherWhereUniqueInput;
}

export interface UserUpdateWithoutCoursesEnrolledDataInput {
  email?: String;
  password?: String;
  teachers?: TeacherUpdateManyWithoutCreatedByInput;
  votes?: VoteUpdateManyWithoutUserInput;
  courses?: CourseUpdateManyWithoutCreatedByInput;
}

export interface UserCreateOneWithoutTeachersInput {
  create?: UserCreateWithoutTeachersInput;
  connect?: UserWhereUniqueInput;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface TeacherSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeacherWhereInput;
  AND?: TeacherSubscriptionWhereInput[] | TeacherSubscriptionWhereInput;
  OR?: TeacherSubscriptionWhereInput[] | TeacherSubscriptionWhereInput;
  NOT?: TeacherSubscriptionWhereInput[] | TeacherSubscriptionWhereInput;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface VoteCreateInput {
  id?: ID_Input;
  teacher: TeacherCreateOneWithoutVotesInput;
  user: UserCreateOneWithoutVotesInput;
}

export interface VoteUpdateWithoutUserDataInput {
  teacher?: TeacherUpdateOneRequiredWithoutVotesInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  email: String;
  password: String;
  teachers?: TeacherCreateManyWithoutCreatedByInput;
  votes?: VoteCreateManyWithoutUserInput;
  courses?: CourseCreateManyWithoutCreatedByInput;
  coursesEnrolled?: EnrollmentCreateManyWithoutUserInput;
}

export interface TeacherUpdateOneRequiredWithoutVotesInput {
  create?: TeacherCreateWithoutVotesInput;
  update?: TeacherUpdateWithoutVotesDataInput;
  upsert?: TeacherUpsertWithoutVotesInput;
  connect?: TeacherWhereUniqueInput;
}

export interface TeacherCreateInput {
  id?: ID_Input;
  name: String;
  age: Int;
  image: String;
  isNative: String;
  about: String;
  experience: String;
  education: String;
  certifications: String;
  createdBy: UserCreateOneWithoutTeachersInput;
  votes?: VoteCreateManyWithoutTeacherInput;
}

export interface TeacherUpdateWithoutVotesDataInput {
  name?: String;
  age?: Int;
  image?: String;
  isNative?: String;
  about?: String;
  experience?: String;
  education?: String;
  certifications?: String;
  createdBy?: UserUpdateOneRequiredWithoutTeachersInput;
}

export interface CourseUpdateManyMutationInput {
  title?: String;
  details?: String;
  price?: Int;
  language?: String;
  location?: String;
  seats?: Int;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
}

export interface UserUpdateOneRequiredWithoutTeachersInput {
  create?: UserCreateWithoutTeachersInput;
  update?: UserUpdateWithoutTeachersDataInput;
  upsert?: UserUpsertWithoutTeachersInput;
  connect?: UserWhereUniqueInput;
}

export interface TeacherUpdateManyWithWhereNestedInput {
  where: TeacherScalarWhereInput;
  data: TeacherUpdateManyDataInput;
}

export interface UserUpdateWithoutTeachersDataInput {
  email?: String;
  password?: String;
  votes?: VoteUpdateManyWithoutUserInput;
  courses?: CourseUpdateManyWithoutCreatedByInput;
  coursesEnrolled?: EnrollmentUpdateManyWithoutUserInput;
}

export interface CourseCreateInput {
  id?: ID_Input;
  title: String;
  details: String;
  price: Int;
  language: String;
  location: String;
  seats: Int;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  createdBy: UserCreateOneWithoutCoursesInput;
  usersEnrolled?: EnrollmentCreateManyWithoutCourseInput;
}

export interface EnrollmentUpdateManyWithoutUserInput {
  create?:
    | EnrollmentCreateWithoutUserInput[]
    | EnrollmentCreateWithoutUserInput;
  delete?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  connect?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  set?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  disconnect?: EnrollmentWhereUniqueInput[] | EnrollmentWhereUniqueInput;
  update?:
    | EnrollmentUpdateWithWhereUniqueWithoutUserInput[]
    | EnrollmentUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | EnrollmentUpsertWithWhereUniqueWithoutUserInput[]
    | EnrollmentUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: EnrollmentScalarWhereInput[] | EnrollmentScalarWhereInput;
}

export interface TeacherCreateWithoutCreatedByInput {
  id?: ID_Input;
  name: String;
  age: Int;
  image: String;
  isNative: String;
  about: String;
  experience: String;
  education: String;
  certifications: String;
  votes?: VoteCreateManyWithoutTeacherInput;
}

export interface EnrollmentUpdateWithWhereUniqueWithoutUserInput {
  where: EnrollmentWhereUniqueInput;
  data: EnrollmentUpdateWithoutUserDataInput;
}

export interface UserCreateWithoutVotesInput {
  id?: ID_Input;
  email: String;
  password: String;
  teachers?: TeacherCreateManyWithoutCreatedByInput;
  courses?: CourseCreateManyWithoutCreatedByInput;
  coursesEnrolled?: EnrollmentCreateManyWithoutUserInput;
}

export interface EnrollmentUpdateWithoutUserDataInput {
  course?: CourseUpdateOneRequiredWithoutUsersEnrolledInput;
}

export interface EnrollmentCreateWithoutCourseInput {
  id?: ID_Input;
  user: UserCreateOneWithoutCoursesEnrolledInput;
}

export interface CourseUpdateOneRequiredWithoutUsersEnrolledInput {
  create?: CourseCreateWithoutUsersEnrolledInput;
  update?: CourseUpdateWithoutUsersEnrolledDataInput;
  upsert?: CourseUpsertWithoutUsersEnrolledInput;
  connect?: CourseWhereUniqueInput;
}

export interface VoteCreateWithoutUserInput {
  id?: ID_Input;
  teacher: TeacherCreateOneWithoutVotesInput;
}

export interface CourseUpdateWithoutUsersEnrolledDataInput {
  title?: String;
  details?: String;
  price?: Int;
  language?: String;
  location?: String;
  seats?: Int;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  createdBy?: UserUpdateOneRequiredWithoutCoursesInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface CourseUpsertWithoutUsersEnrolledInput {
  update: CourseUpdateWithoutUsersEnrolledDataInput;
  create: CourseCreateWithoutUsersEnrolledInput;
}

export type EnrollmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EnrollmentUpsertWithWhereUniqueWithoutUserInput {
  where: EnrollmentWhereUniqueInput;
  update: EnrollmentUpdateWithoutUserDataInput;
  create: EnrollmentCreateWithoutUserInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface EnrollmentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: EnrollmentScalarWhereInput[] | EnrollmentScalarWhereInput;
  OR?: EnrollmentScalarWhereInput[] | EnrollmentScalarWhereInput;
  NOT?: EnrollmentScalarWhereInput[] | EnrollmentScalarWhereInput;
}

export interface TeacherUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TeacherWhereUniqueInput;
  update: TeacherUpdateWithoutCreatedByDataInput;
  create: TeacherCreateWithoutCreatedByInput;
}

export interface UserUpsertWithoutTeachersInput {
  update: UserUpdateWithoutTeachersDataInput;
  create: UserCreateWithoutTeachersInput;
}

export interface VoteCreateWithoutTeacherInput {
  id?: ID_Input;
  user: UserCreateOneWithoutVotesInput;
}

export interface TeacherUpsertWithoutVotesInput {
  update: TeacherUpdateWithoutVotesDataInput;
  create: TeacherCreateWithoutVotesInput;
}

export interface UserCreateWithoutCoursesEnrolledInput {
  id?: ID_Input;
  email: String;
  password: String;
  teachers?: TeacherCreateManyWithoutCreatedByInput;
  votes?: VoteCreateManyWithoutUserInput;
  courses?: CourseCreateManyWithoutCreatedByInput;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CourseWhereInput;
  AND?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
  OR?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
  NOT?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
}

export interface VoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  OR?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  NOT?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface TeacherUpdateManyDataInput {
  name?: String;
  age?: Int;
  image?: String;
  isNative?: String;
  about?: String;
  experience?: String;
  education?: String;
  certifications?: String;
}

export interface CourseScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  seats?: Int;
  seats_not?: Int;
  seats_in?: Int[] | Int;
  seats_not_in?: Int[] | Int;
  seats_lt?: Int;
  seats_lte?: Int;
  seats_gt?: Int;
  seats_gte?: Int;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  AND?: CourseScalarWhereInput[] | CourseScalarWhereInput;
  OR?: CourseScalarWhereInput[] | CourseScalarWhereInput;
  NOT?: CourseScalarWhereInput[] | CourseScalarWhereInput;
}

export interface CourseUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutCreatedByDataInput;
  create: CourseCreateWithoutCreatedByInput;
}

export interface EnrollmentUpsertWithWhereUniqueWithoutCourseInput {
  where: EnrollmentWhereUniqueInput;
  update: EnrollmentUpdateWithoutCourseDataInput;
  create: EnrollmentCreateWithoutCourseInput;
}

export interface UserUpsertWithoutCoursesEnrolledInput {
  update: UserUpdateWithoutCoursesEnrolledDataInput;
  create: UserCreateWithoutCoursesEnrolledInput;
}

export interface UserCreateWithoutCoursesInput {
  id?: ID_Input;
  email: String;
  password: String;
  teachers?: TeacherCreateManyWithoutCreatedByInput;
  votes?: VoteCreateManyWithoutUserInput;
  coursesEnrolled?: EnrollmentCreateManyWithoutUserInput;
}

export type TeacherWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TeacherCreateWithoutVotesInput {
  id?: ID_Input;
  name: String;
  age: Int;
  image: String;
  isNative: String;
  about: String;
  experience: String;
  education: String;
  certifications: String;
  createdBy: UserCreateOneWithoutTeachersInput;
}

export interface CourseCreateWithoutCreatedByInput {
  id?: ID_Input;
  title: String;
  details: String;
  price: Int;
  language: String;
  location: String;
  seats: Int;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  usersEnrolled?: EnrollmentCreateManyWithoutCourseInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  teachers: <T = FragmentableArray<Teacher>>(args?: {
    where?: TeacherWhereInput;
    orderBy?: TeacherOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coursesEnrolled: <T = FragmentableArray<Enrollment>>(args?: {
    where?: EnrollmentWhereInput;
    orderBy?: EnrollmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  teachers: <T = Promise<AsyncIterator<TeacherSubscription>>>(args?: {
    where?: TeacherWhereInput;
    orderBy?: TeacherOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coursesEnrolled: <T = Promise<AsyncIterator<EnrollmentSubscription>>>(args?: {
    where?: EnrollmentWhereInput;
    orderBy?: EnrollmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  teacher: <T = TeacherPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  teacher: <T = TeacherSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface Teacher {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  age: Int;
  image: String;
  isNative: String;
  about: String;
  experience: String;
  education: String;
  certifications: String;
}

export interface TeacherPromise extends Promise<Teacher>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  image: () => Promise<String>;
  isNative: () => Promise<String>;
  about: () => Promise<String>;
  experience: () => Promise<String>;
  education: () => Promise<String>;
  certifications: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeacherSubscription
  extends Promise<AsyncIterator<Teacher>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  isNative: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  education: () => Promise<AsyncIterator<String>>;
  certifications: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Course {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  details: String;
  price: Int;
  language: String;
  location: String;
  seats: Int;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  details: () => Promise<String>;
  price: () => Promise<Int>;
  language: () => Promise<String>;
  location: () => Promise<String>;
  seats: () => Promise<Int>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  usersEnrolled: <T = FragmentableArray<Enrollment>>(args?: {
    where?: EnrollmentWhereInput;
    orderBy?: EnrollmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  language: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  seats: () => Promise<AsyncIterator<Int>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  usersEnrolled: <T = Promise<AsyncIterator<EnrollmentSubscription>>>(args?: {
    where?: EnrollmentWhereInput;
    orderBy?: EnrollmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface TeacherEdge {
  node: Teacher;
  cursor: String;
}

export interface TeacherEdgePromise extends Promise<TeacherEdge>, Fragmentable {
  node: <T = TeacherPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeacherEdgeSubscription
  extends Promise<AsyncIterator<TeacherEdge>>,
    Fragmentable {
  node: <T = TeacherSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CoursePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  details: String;
  price: Int;
  language: String;
  location: String;
  seats: Int;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  details: () => Promise<String>;
  price: () => Promise<Int>;
  language: () => Promise<String>;
  location: () => Promise<String>;
  seats: () => Promise<Int>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  language: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  seats: () => Promise<AsyncIterator<Int>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateEnrollment {
  count: Int;
}

export interface AggregateEnrollmentPromise
  extends Promise<AggregateEnrollment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEnrollmentSubscription
  extends Promise<AsyncIterator<AggregateEnrollment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface EnrollmentConnection {
  pageInfo: PageInfo;
  edges: EnrollmentEdge[];
}

export interface EnrollmentConnectionPromise
  extends Promise<EnrollmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EnrollmentEdge>>() => T;
  aggregate: <T = AggregateEnrollmentPromise>() => T;
}

export interface EnrollmentConnectionSubscription
  extends Promise<AsyncIterator<EnrollmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EnrollmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEnrollmentSubscription>() => T;
}

export interface EnrollmentSubscriptionPayload {
  mutation: MutationType;
  node: Enrollment;
  updatedFields: String[];
  previousValues: EnrollmentPreviousValues;
}

export interface EnrollmentSubscriptionPayloadPromise
  extends Promise<EnrollmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EnrollmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EnrollmentPreviousValuesPromise>() => T;
}

export interface EnrollmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EnrollmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EnrollmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EnrollmentPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateTeacher {
  count: Int;
}

export interface AggregateTeacherPromise
  extends Promise<AggregateTeacher>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeacherSubscription
  extends Promise<AsyncIterator<AggregateTeacher>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeacherPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  age: Int;
  image: String;
  isNative: String;
  about: String;
  experience: String;
  education: String;
  certifications: String;
}

export interface TeacherPreviousValuesPromise
  extends Promise<TeacherPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  image: () => Promise<String>;
  isNative: () => Promise<String>;
  about: () => Promise<String>;
  experience: () => Promise<String>;
  education: () => Promise<String>;
  certifications: () => Promise<String>;
}

export interface TeacherPreviousValuesSubscription
  extends Promise<AsyncIterator<TeacherPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  isNative: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  education: () => Promise<AsyncIterator<String>>;
  certifications: () => Promise<AsyncIterator<String>>;
}

export interface TeacherSubscriptionPayload {
  mutation: MutationType;
  node: Teacher;
  updatedFields: String[];
  previousValues: TeacherPreviousValues;
}

export interface TeacherSubscriptionPayloadPromise
  extends Promise<TeacherSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeacherPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeacherPreviousValuesPromise>() => T;
}

export interface TeacherSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeacherSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeacherSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeacherPreviousValuesSubscription>() => T;
}

export interface Enrollment {
  id: ID_Output;
}

export interface EnrollmentPromise extends Promise<Enrollment>, Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface EnrollmentSubscription
  extends Promise<AsyncIterator<Enrollment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  course: <T = CourseSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface EnrollmentPreviousValues {
  id: ID_Output;
}

export interface EnrollmentPreviousValuesPromise
  extends Promise<EnrollmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface EnrollmentPreviousValuesSubscription
  extends Promise<AsyncIterator<EnrollmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface TeacherConnection {
  pageInfo: PageInfo;
  edges: TeacherEdge[];
}

export interface TeacherConnectionPromise
  extends Promise<TeacherConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeacherEdge>>() => T;
  aggregate: <T = AggregateTeacherPromise>() => T;
}

export interface TeacherConnectionSubscription
  extends Promise<AsyncIterator<TeacherConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeacherEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeacherSubscription>() => T;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EnrollmentEdge {
  node: Enrollment;
  cursor: String;
}

export interface EnrollmentEdgePromise
  extends Promise<EnrollmentEdge>,
    Fragmentable {
  node: <T = EnrollmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EnrollmentEdgeSubscription
  extends Promise<AsyncIterator<EnrollmentEdge>>,
    Fragmentable {
  node: <T = EnrollmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Teacher",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Enrollment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
